---
import { cn } from '@utils/cn';
import type { HTMLAttributes } from 'astro/types';

export interface Props {
  /**
   * Button variant style
   * @default 'primary'
   */
  variant?: 'primary' | 'secondary' | 'outline' | 'text';

  /**
   * Button size
   * @default 'default'
   */
  size?: 'small' | 'default' | 'large';

  /**
   * URL to navigate to (turns button into an <a> element)
   */
  href?: string;

  /**
   * Button type attribute (for form submission)
   * @default 'button'
   */
  type?: HTMLAttributes<'button'>['type'];

  /**
   * Additional CSS classes to apply
   */
  class?: string;

  /**
   * Whether the button is disabled
   * @default false
   */
  disabled?: boolean;

  /**
   * Button's aria-label for accessibility
   */
  ariaLabel?: string;
}

const {
  variant = 'primary',
  size = 'default',
  href,
  type = href ? undefined : 'button',
  class: className,
  disabled = false,
  ariaLabel,
  ...rest
} = Astro.props;

// Base styling for all button variants
const baseStyles =
  'inline-flex items-center justify-center font-semibold text-center focus-visible:outline-2 focus-visible:outline-offset-2';

// Size variants
const sizeClasses = {
  small: 'px-2.5 py-1.5 text-xs',
  default: 'px-3.5 py-2.5 text-sm',
  large: 'px-4 py-3 text-base'
};

// Style variants
const variantClasses = {
  primary:
    'bg-orange-600 text-white hover:bg-indigo-700 focus-visible:outline-orange-600 shadow-xs',
  secondary:
    'bg-indigo-600 text-white hover:bg-indigo-700 focus-visible:outline-indigo-600 shadow-xs',
  outline:
    'border border-gray-300 bg-white text-gray-900 hover:bg-gray-50 focus-visible:outline-gray-600',
  text: 'text-indigo-600 hover:text-indigo-500 focus-visible:outline-indigo-600 hover:underline'
};

// Combine all classes
const buttonClasses = cn(
  baseStyles,
  sizeClasses[size],
  variantClasses[variant],
  disabled && 'opacity-50 cursor-not-allowed',
  className || ''
);

// HTML element to render (a or button)
const Tag = href ? 'a' : 'button';
---

<Tag
  href={href}
  type={type}
  class={cn(
    baseStyles, 
    sizeClasses[size], 
    variantClasses[variant], 
    'transition-all duration-200',
    disabled && 'opacity-50 cursor-not-allowed', 
    className
  )}
  aria-label={ariaLabel}
  disabled={disabled}
  {...rest}>
  <slot />
</Tag>
